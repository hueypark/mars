// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ACTOR_MESSAGE_H_
#define FLATBUFFERS_GENERATED_ACTOR_MESSAGE_H_

#include "flatbuffers/flatbuffers.h"

#include "vector_generated.h"

namespace message {

struct Actor;

struct Actor FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_POSITION = 4
  };
  const Vector *Position() const {
    return GetStruct<const Vector *>(VT_POSITION);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<Vector>(verifier, VT_POSITION) &&
           verifier.EndTable();
  }
};

struct ActorBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_Position(const Vector *Position) {
    fbb_.AddStruct(Actor::VT_POSITION, Position);
  }
  explicit ActorBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ActorBuilder &operator=(const ActorBuilder &);
  flatbuffers::Offset<Actor> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Actor>(end);
    return o;
  }
};

inline flatbuffers::Offset<Actor> CreateActor(
    flatbuffers::FlatBufferBuilder &_fbb,
    const Vector *Position = 0) {
  ActorBuilder builder_(_fbb);
  builder_.add_Position(Position);
  return builder_.Finish();
}

inline const message::Actor *GetActor(const void *buf) {
  return flatbuffers::GetRoot<message::Actor>(buf);
}

inline const message::Actor *GetSizePrefixedActor(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<message::Actor>(buf);
}

inline bool VerifyActorBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<message::Actor>(nullptr);
}

inline bool VerifySizePrefixedActorBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<message::Actor>(nullptr);
}

inline void FinishActorBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<message::Actor> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedActorBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<message::Actor> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace message

#endif  // FLATBUFFERS_GENERATED_ACTOR_MESSAGE_H_
